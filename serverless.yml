service: chatgpt-trading-phase1

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  dotenv:
    path: .env.${opt:stage, 'dev'}
    include:
      - AI_PROVIDER
      - AI_MODEL
      - AI_API_KEY
      - ALPACA_KEY_ID
      - ALPACA_SECRET_KEY
      - ALPACA_BASE_URL
      - SES_REGION
      - SES_SENDER_EMAIL
      - ADMIN_EMAIL
      - EXECUTE_TRADES
      - STARTING_CASH
      - LOGTAIL_SOURCE_TOKEN
      - LOGTAIL_ENDPOINT
      - LOGTAIL_API_KEY
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002

provider:
  name: aws
  runtime: nodejs20.x
  profile: autotrader
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${opt:stage, self:provider.stage}
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - "arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-logProcessor"
  environment:
    AI_PROVIDER: ${file(.env.${opt:stage, 'dev'}.json):AI_PROVIDER}
    AI_MODEL: ${file(.env.${opt:stage, 'dev'}.json):AI_MODEL}
    AI_API_KEY: ${file(.env.${opt:stage, 'dev'}.json):AI_API_KEY}
    ALPACA_KEY_ID: ${file(.env.${opt:stage, 'dev'}.json):ALPACA_KEY_ID}
    ALPACA_SECRET_KEY: ${file(.env.${opt:stage, 'dev'}.json):ALPACA_SECRET_KEY}
    ALPACA_BASE_URL: ${file(.env.${opt:stage, 'dev'}.json):ALPACA_BASE_URL}
    SES_REGION: ${file(.env.${opt:stage, 'dev'}.json):SES_REGION}
    SES_SENDER_EMAIL: ${file(.env.${opt:stage, 'dev'}.json):SES_SENDER_EMAIL}
    ADMIN_EMAIL: ${file(.env.${opt:stage, 'dev'}.json):ADMIN_EMAIL}
    EXECUTE_TRADES: ${file(.env.${opt:stage, 'dev'}.json):EXECUTE_TRADES}
    STARTING_CASH: ${file(.env.${opt:stage, 'dev'}.json):STARTING_CASH}
    LOGTAIL_SOURCE_TOKEN: ${file(.env.${opt:stage, 'dev'}.json):LOGTAIL_SOURCE_TOKEN}
    LOGTAIL_ENDPOINT: ${file(.env.${opt:stage, 'dev'}.json):LOGTAIL_ENDPOINT}
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
    IS_OFFLINE: ${env:IS_OFFLINE, 'false'}

functions:
  # Scheduled Functions - Optimized Pipeline
  marketResearch:
    handler: src/handlers/scheduled/market-research.handler
    timeout: 600 # 10 minutes for deep research
    events:
      - schedule: cron(0 11 * * ? *) # 6 AM ET (11 AM UTC) - Pre-market research
      - schedule: cron(0 22 * * ? *) # 5 PM ET (10 PM UTC) - Post-market research
    environment:
      AI_PROVIDER: ${file(.env.${opt:stage, 'dev'}.json):AI_PROVIDER}
      AI_MODEL: ${file(.env.${opt:stage, 'dev'}.json):AI_MODEL}

  dailyTrading:
    handler: src/handlers/scheduled/daily-trading.handler
    timeout: 180 # 3 minutes for trading decisions
    events:
      - schedule: cron(0 21 * * ? *) # 4 PM ET (9 PM UTC) - Market close timing
    environment:
      AI_PROVIDER: ${file(.env.${opt:stage, 'dev'}.json):AI_PROVIDER}
      AI_MODEL: ${file(.env.${opt:stage, 'dev'}.json):AI_MODEL}

  portfolioUpdate:
    handler: src/handlers/scheduled/portfolio-update.handler
    events:
      - schedule: cron(0 21 * * ? *) # 4:30 PM ET (9:30 PM UTC) - After market close

  stopLoss:
    handler: src/handlers/scheduled/stop-loss.handler
    events:
      - schedule: cron(0 14 * * ? *) # 10 AM ET (2 PM UTC) - After market open
      - schedule: cron(0 17 * * ? *) # 1 PM ET (5 PM UTC) - Mid-day check
      - schedule: cron(0 20 * * ? *) # 4 PM ET (8 PM UTC) - Market close
    environment:
      AI_PROVIDER: ${file(.env.${opt:stage, 'dev'}.json):AI_PROVIDER}
      AI_MODEL: ${file(.env.${opt:stage, 'dev'}.json):AI_MODEL}

  emailReport:
    handler: src/handlers/scheduled/email-report.handler
    events:
      - schedule: cron(0 21 * * ? *) # 4:30 PM ET (9:30 PM UTC) - End of day report

  orderMonitor:
    handler: src/handlers/scheduled/order-monitor.handler
    timeout: 120 # 2 minutes for order monitoring
    events:
      - schedule: cron(0 15 * * ? *) # 11 AM ET (3 PM UTC) - Mid-morning check
      - schedule: cron(0 19 * * ? *) # 2 PM ET (7 PM UTC) - Mid-afternoon check
    environment:
      AI_PROVIDER: ${file(.env.${opt:stage, 'dev'}.json):AI_PROVIDER}
      AI_MODEL: ${file(.env.${opt:stage, 'dev'}.json):AI_MODEL}

  # REST API Endpoints
  getPortfolio:
    handler: src/handlers/api/get-portfolio.handler
    events:
      - http:
          path: /api/portfolio
          method: get
          cors: true

  getTradingHistory:
    handler: src/handlers/api/get-trading-history.handler
    events:
      - http:
          path: /api/trading-history
          method: get
          cors: true

  updateConfiguration:
    handler: src/handlers/api/update-configuration.handler
    events:
      - http:
          path: /api/configuration
          method: put
          cors: true

  triggerBacktest:
    handler: src/handlers/api/trigger-backtest.handler
    events:
      - http:
          path: /api/backtest
          method: post
          cors: true

  getSystemStatus:
    handler: src/handlers/api/get-system-status.handler
    timeout: 30
    events:
      - http:
          path: /api/status
          method: get
          cors: true

  triggerDailyTrading:
    handler: src/handlers/api/trigger-daily-trading.handler
    timeout: 180 # 3 minutes for trading decisions
    events:
      - http:
          path: /api/trigger-daily-trading
          method: post
          cors: true

  getOpenAIModels:
    handler: src/handlers/api/get-openai-models.handler
    timeout: 30
    events:
      - http:
          path: /api/openai-models
          method: get
          cors: true

  resetSystem:
    handler: src/handlers/api/reset-system.handler
    timeout: 60
    events:
      - http:
          path: /api/reset-system
          method: post
          cors: true

  testBrokerage:
    handler: src/handlers/api/test-brokerage.handler
    timeout: 30
    events:
      - http:
          path: /api/test-brokerage
          method: post
          cors: true

  testTrading:
    handler: src/handlers/api/test-trading.handler
    timeout: 30
    events:
      - http:
          path: /api/test-trading
          method: post
          cors: true

  testMarketData:
    handler: src/handlers/api/test-market-data.handler
    timeout: 30
    events:
      - http:
          path: /api/test-market-data
          method: get
          cors: true

  getAIMemory:
    handler: src/handlers/api/get-ai-memory.handler
    timeout: 30
    events:
      - http:
          path: /api/ai-memory
          method: get
          cors: true

  getDiscoveryQuality:
    handler: src/handlers/api/get-discovery-quality.handler
    timeout: 30
    events:
      - http:
          path: /api/discovery-quality
          method: get
          cors: true

  getTickerHistory:
    handler: src/handlers/api/get-ticker-history.handler
    timeout: 30
    events:
      - http:
          path: /api/ticker-history
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                ticker: true

  testEmail:
    handler: src/handlers/api/test-email.handler
    timeout: 30
    events:
      - http:
          path: /api/test-email
          method: post
          cors: true
          request:
            parameters:
              querystrings:
                recipient: false

  triggerMarketResearch:
    handler: src/handlers/api/trigger-market-research.handler
    timeout: 600 # 10 minutes for deep research
    events:
      - http:
          path: /api/trigger-market-research
          method: post
          cors: true

  # Logging System
  logReceiver:
    handler: src/handlers/api/log-receiver.logReceiver
    timeout: 30
    events:
      - http:
          path: /api/logs
          method: post
          cors: true
    environment:
      LOGTAIL_API_KEY: ${file(.env.${opt:stage, 'dev'}.json):LOGTAIL_API_KEY}
      LOGTAIL_ENDPOINT: ${file(.env.${opt:stage, 'dev'}.json):LOGTAIL_ENDPOINT}

  logProcessor:
    handler: src/handlers/scheduled/log-processor.logProcessor
    timeout: 60
    environment:
      LOGTAIL_API_KEY: ${file(.env.${opt:stage, 'dev'}.json):LOGTAIL_API_KEY}
      LOGTAIL_ENDPOINT: ${file(.env.${opt:stage, 'dev'}.json):LOGTAIL_ENDPOINT}

resources:
  Resources:
    TradingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          # Primary Key attributes
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          # GSI attributes for ticker queries
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TickerIndex
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
